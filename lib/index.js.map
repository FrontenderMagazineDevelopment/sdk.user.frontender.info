{"version":3,"sources":["../source/index.js"],"names":["UserService","get","url","result","json","post","user","options","method","headers","Accept","body","JSON","stringify","details","id","response","ok","status","messages","postNotFound","statusText"],"mappings":";;;;;;;;AAAA;;AACA;;;;;;;;;;AAEA;;;;;;;;;;;;IAYqBA,W;;;;;;;;;;;;;;;gMAuBnBC,G,2DAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8IACkC,MAAKC,GADvC;;AAAA;AACEC,oBADF;AAAA;AAAA,qBAEeA,OAAOC,IAAP,EAFf;;AAAA;AAEEA,kBAFF;AAAA,+CAGGA,IAHH;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K,UAwBNC,I;0EAAO,kBAAOC,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACCC,uBADD,GACW;AACdC,0BAAQ,MADM;AAEdC,2BAAS;AACPC,4BAAQ,kBADD;AAEP,oCAAgB;AAFT,mBAFK;AAMdC,wBAAMC,KAAKC,SAAL,CAAeP,IAAf;AANQ,iBADX;AAAA;AAAA,gJASiC,MAAKJ,GATtC,EAS6CK,OAT7C;;AAAA;AASCJ,sBATD;AAAA;AAAA,uBAUcA,OAAOC,IAAP,EAVd;;AAAA;AAUCA,oBAVD;AAAA,kDAWEA,IAXF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;eA+CPU,O;0EAAU,kBAAMC,EAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gJACgC,MAAKb,GADrC,GAC2Ca,EAD3C;;AAAA;AACFC,wBADE;;AAAA,qBAEJA,SAASC,EAFL;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAGaD,SAASZ,IAAT,EAHb;;AAAA;AAGAA,oBAHA;AAAA,kDAICA,IAJD;;AAAA;AAAA,sBAMJY,SAASE,MAAT,KAAoB,GANhB;AAAA;AAAA;AAAA;;AAAA,sBAM2B,gCAAkBlB,YAAYmB,QAAZ,CAAqBC,YAAvC,CAN3B;;AAAA;AAAA,sBAOF,sCAAwBJ,SAASE,MAAjC,EAAyCF,SAASK,UAAlD,CAPE;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;AA7FV;;;;;;AAMA;;;;;;;;;;;;;;;;;;AAsBA;;;;;;;;;;;;;;;;;;;;AAgCA;;;;;;;;;AASA;;;;;;;AAOA;;;;;;;;;;;;;;;;;;;;;;AA7EmBrB,W,CAKZmB,Q,GAAW,E;kBALCnB,W","file":"index.js","sourcesContent":["import 'babel-polyfill';\nimport { TMMicroServiceAPI, ErrorNotFound, ErrorServerResponse } from 'tm-service-api';\n\n/**\n * User Service API\n *\n * @namespace UserService\n * @module UserService\n * @class\n * @exports\n *\n * @param {string} url - service url\n * @param {string | null} [token = null] - user access tocken if available\n * @see https://frontender.info/\n */\nexport default class UserService extends TMMicroServiceAPI {\n  /**\n   * Object with class service messages\n   * @type {Object}\n   */\n  static messages = {};\n\n  /**\n   * Get users list\n   *\n   * @method get\n   * @async\n   * @public\n   * @memberof UserService\n   *\n   * @return {UserList} - array of posts\n   *\n   * @example <caption>Read users list</caption>\n   * (async () => {\n   *   const User = new UserService('https://user.frontender.info/');\n   *   const list = await User.get();\n   * })();\n   */\n  get = async () => {\n    const result = await super.request(`${this.url}`);\n    const json = await result.json();\n    return json;\n  };\n\n  /**\n   * Create user\n   *\n   * @method post\n   * @async\n   * @public\n   * @memberof UserService\n   *\n   * @param {string} title - post title\n   * @param {string} body - post body\n   * @return {User} - created user\n   *\n   * @example <caption>Create user</caption>\n   * (async () => {\n   *   const User = new UserService('https://frontender.info/');\n   *   const details = await User.post({});\n   * })();\n   */\n  post = async (user) => {\n    const options = {\n      method: 'POST',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(user),\n    };\n    const result = await super.request(`${this.url}`, options);\n    const json = await result.json();\n    return json;\n  };\n\n  /**\n   * User list object\n   *\n   * @namespace UserService\n   * @typedef {UserList} Array of users\n   *\n   * @property {Array.<User>} - array of users\n   */\n\n  /**\n   * User object\n   *\n   * @namespace UserService\n   * @typedef {User} User representation\n   */\n\n  /**\n   * Read specific user\n   *\n   * @method details\n   * @memberof UserService\n   * @async\n   * @public\n   *\n   * @param {number} id - user id\n   * @return {User} - user details\n   *\n   * @example <caption>Get user</caption>\n   * (async () => {\n   *   const User = new UserService('https://frontender.info/');\n   *   const details = await User.details(2);\n   * })();\n   */\n  details = async id => {\n    const response = await super.request(`${this.url}${id}`);\n    if (response.ok) {\n      const json = await response.json();\n      return json;\n    }\n    if (response.status === 404) throw new ErrorNotFound(UserService.messages.postNotFound);\n    throw new ErrorServerResponse(response.status, response.statusText);\n  };\n}\n"]}