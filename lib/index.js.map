{"version":3,"sources":["../source/index.js"],"names":["UserService","get","url","response","ok","json","status","statusText","post","user","options","method","headers","Accept","body","JSON","stringify","details","id","messages","userNotFound","delete"],"mappings":";;;;;;;;AAAA;;AACA;;;;;;;;;;AAEA;;;;;;;;;;;;IAYqBA,W;;;;;;;;;;;;;;;gMA0BnBC,G,2DAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8IACoC,MAAKC,GADzC;;AAAA;AACEC,sBADF;;AAAA,mBAEAA,SAASC,EAFT;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAGiBD,SAASE,IAAT,EAHjB;;AAAA;AAGIA,kBAHJ;AAAA,+CAIKA,IAJL;;AAAA;AAAA,oBAME,sCAAwBF,SAASG,MAAjC,EAAyCH,SAASI,UAAlD,CANF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K,UA4BNC,I;0EAAO,kBAAMC,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACCC,uBADD,GACW;AACdC,0BAAQ,MADM;AAEdC,2BAAS;AACPC,4BAAQ,kBADD;AAEP,oCAAgB;AAFT,mBAFK;AAMdC,wBAAMC,KAAKC,SAAL,CAAeP,IAAf;AANQ,iBADX;AAAA;AAAA,gJASmC,MAAKP,GATxC,EAS+CQ,OAT/C;;AAAA;AASCP,wBATD;;AAAA,qBAUDA,SAASC,EAVR;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAWgBD,SAASE,IAAT,EAXhB;;AAAA;AAWGA,oBAXH;AAAA,kDAYIA,IAZJ;;AAAA;AAAA,sBAcC,sCAAwBF,SAASG,MAAjC,EAAyCH,SAASI,UAAlD,CAdD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;eAoEPU,O;0EAAU,kBAAMC,EAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gJACgC,MAAKhB,GADrC,GAC2CgB,EAD3C;;AAAA;AACFf,wBADE;;AAAA,qBAEJA,SAASC,EAFL;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAGaD,SAASE,IAAT,EAHb;;AAAA;AAGAA,oBAHA;AAAA,kDAICA,IAJD;;AAAA;AAAA,sBAMJF,SAASG,MAAT,KAAoB,GANhB;AAAA;AAAA;AAAA;;AAAA,sBAM2B,gCAAkBN,YAAYmB,QAAZ,CAAqBC,YAAvC,CAN3B;;AAAA;AAAA,sBAOF,sCAAwBjB,SAASG,MAAjC,EAAyCH,SAASI,UAAlD,CAPE;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;eA4BVc,M;0EAAS,kBAAMH,EAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACDR,uBADC,GACS;AACdC,0BAAQ;AADM,iBADT;AAAA;AAAA,gJAIiC,MAAKT,GAJtC,GAI4CgB,EAJ5C,EAIkDR,OAJlD;;AAAA;AAIDP,wBAJC;;AAAA,qBAKHA,SAASC,EALN;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,sBAMHD,SAASG,MAAT,KAAoB,GANjB;AAAA;AAAA;AAAA;;AAAA,sBAM4B,gCAAkBN,YAAYmB,QAAZ,CAAqBC,YAAvC,CAN5B;;AAAA;AAAA,sBAOD,sCAAwBjB,SAASG,MAAjC,EAAyCH,SAASI,UAAlD,CAPC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;AArJT;;;;;;AAQA;;;;;;;;;;;;;;;;;;;AA0BA;;;;;;;;;;;;;;;;;;;;;AAoCA;;;;;;;;;AASA;;;;;;;;;;;;;;;;;;;;;;;AAuBA;;;;;;;;;;;;;;;;;;;;;AA6BA;;;;;;;;;;;;;;;;;;;;;;;AApImBP,W,CAKZmB,Q,GAAW;AAChBC,gBAAc;AADE,C;kBALCpB,W","file":"index.js","sourcesContent":["import 'babel-polyfill';\nimport { TMMicroServiceAPI, ErrorNotFound, ErrorServerResponse } from 'tm-service-api';\n\n/**\n * User Service API\n *\n * @namespace UserService\n * @module UserService\n * @class\n * @exports\n *\n * @param {string} url - service url\n * @param {string | null} [token = null] - user access tocken if available\n * @see https://frontender.info/\n */\nexport default class UserService extends TMMicroServiceAPI {\n  /**\n   * Object with class service messages\n   * @type {Object}\n   */\n  static messages = {\n    userNotFound: 'User not found',\n  };\n\n  /**\n   * Get users list\n   *\n   * @method get\n   * @async\n   * @public\n   * @memberof UserService\n   *\n   * @return {UserList} - array of posts\n   * @throw {ErrorServerResponse} - server response with error status\n   *\n   * @example <caption>Read users list</caption>\n   * (async () => {\n   *   const User = new UserService('https://user.frontender.info/', 'Bearer 8237612j.h3g12jh.32j13h');\n   *   const list = await User.get();\n   * })();\n   */\n  get = async () => {\n    const response = await super.request(`${this.url}`);\n    if (response.ok) {\n      const json = await response.json();\n      return json;\n    }\n    throw new ErrorServerResponse(response.status, response.statusText);\n  };\n\n  /**\n   * Create user\n   *\n   * @method post\n   * @async\n   * @public\n   * @memberof UserService\n   *\n   * @param {string} title - post title\n   * @param {string} body - post body\n   * @return {User} - created user\n   * @throw {ErrorServerResponse} - server response with error status\n   *\n   * @example <caption>Create user</caption>\n   * (async () => {\n   *   const User = new UserService('https://frontender.info/');\n   *   const details = await User.post({});\n   * })();\n   */\n  post = async user => {\n    const options = {\n      method: 'POST',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(user),\n    };\n    const response = await super.request(`${this.url}`, options);\n    if (response.ok) {\n      const json = await response.json();\n      return json;\n    }\n    throw new ErrorServerResponse(response.status, response.statusText);\n  };\n\n  /**\n   * User list object\n   *\n   * @namespace UserService\n   * @typedef {UserList} Array of users\n   *\n   * @property {Array.<User>} - array of users\n   */\n\n  /**\n   * User object\n   *\n   * @namespace UserService\n   * @typedef {User} User representation\n   *\n   * @property {string} name - user name\n   * @property {string} avatar - avatar url\n   * @property {string} twitter - twitter account url\n   * @property {string} blog - blog url\n   * @property {string} email - email url\n   * @property {string} github - github account url\n   * @property {string} trello - trello account url\n   * @property {boolean} team - is user part of the team\n   * @property {boolean} core - is user part of the core team\n   * @property {boolean} translator - is user translator\n   * @property {boolean} editor - is user editor\n   * @property {boolean} developer - is user developer\n   * @property {boolean} author - is user author\n   * @property {number} salary - salary, if user part of the core team\n   *\n   */\n\n  /**\n   * Read specific users details\n   *\n   * @method details\n   * @memberof UserService\n   * @async\n   * @public\n   *\n   * @param {number} id - user id\n   * @return {User} - user details\n   * @throw {ErrorNotFound} - user with this id not found\n   * @throw {ErrorServerResponse} - server response with other error status\n   *\n   * @example <caption>Get user</caption>\n   * (async () => {\n   *   const User = new UserService('https://frontender.info/');\n   *   const details = await User.details('59e11e3bbce79c073e548a9a');\n   * })();\n   */\n  details = async id => {\n    const response = await super.request(`${this.url}${id}`);\n    if (response.ok) {\n      const json = await response.json();\n      return json;\n    }\n    if (response.status === 404) throw new ErrorNotFound(UserService.messages.userNotFound);\n    throw new ErrorServerResponse(response.status, response.statusText);\n  };\n\n  /**\n   * Delete user by id\n   *\n   * @method delete\n   * @memberof UserService\n   * @async\n   * @public\n   *\n   * @param {string} id - user id\n   * @throw {ErrorNotFound} - user with this id not found\n   * @throw {ErrorServerResponse} - server response with other error status\n   *\n   * @example <caption>Delete user by id</caption>\n   * (async () => {\n   *   const User = new UserService('https://frontender.info/');\n   *   await User.delete('59e11e3bbce79c073e548a9a');\n   * })();\n   */\n  delete = async id => {\n    const options = {\n      method: 'DELETE',\n    };\n    const response = await super.request(`${this.url}${id}`, options);\n    if (response.ok) return;\n    if (response.status === 404) throw new ErrorNotFound(UserService.messages.userNotFound);\n    throw new ErrorServerResponse(response.status, response.statusText);\n  };\n}\n"]}